---
# tasks file for influxdb

#=============================================================================================================
# Install block
#
- block:

  - name: Is influxd runnin?
    ansible.builtin.include_tasks:
      file: "../../shared/any/tasks/is-service-running.yml"
    vars:
      service_name: influxd.service

  #......................................................................................
  # only install it not running...

  - name: Install package and configure iff not running or forced
    block:

    #################
    # Install Package

    - name: Package install
      ansible.builtin.include_tasks:
        file: "../../shared/influxdb/tasks/{{ ansible_distribution }}-install.yml"
      vars:
        package: influxdb2


    ##################
    # Configure

    # - name: Check if configuration file exists
    #   stat:
    #     path: "{{ SEARCH_PATH }}/{{ SEARCH_FILE }}"
    #   register: result

    - block:

      - block:

        - name: create the nfs mount directory
          ansible.builtin.file:
            path: "{{ influxdb_data_path }}"

        - name: mount NFS data directory if required
          ansible.builtin.include_role:
            name: nfs-client

        when: mount_nfs_share

      - name: "Create /etc/influxd/"
        ansible.builtin.file:
          path: /etc/influxdb
          state: directory
        become: true
        notify:
          - restart influxd

      - name: "Template config for storage in /etc/influxd/config.toml"
        ansible.builtin.template:
          src: config.toml.j2
          dest: /etc/influxdb/config.toml
        become: true
        notify:
          - restart influxd

      when: influxdb_configure
  
    when: service_running is false or influxdb_reload

  #......................................................................................
  # This captures the failure just in case it already exists!!!! 
  #

  - name: Initialize the new influxdb instance (note, must be running)
    block:

      - name: ensure influxd is started
        ansible.builtin.systemd_service:
          name: influxd
          state: started
        become: true

      - include_tasks: initializedb.yml
 
    rescue:
        - block:
        
          - name: Maybe and exiting setup, so get auth list from a cmd, register output
            ansible.builtin.command: '/usr/bin/influx auth list --json'
            become: true
            register: cmd_result
            failed_when: cmd_result.rc != 0

          - name: converting json to list of dictionaries
            set_fact:
              full_list: "{{ cmd_result.stdout| from_json }}"

          - name:  This is used by telegraf.
            set_fact:
              influxdb_operators_token: "{{ (full_list|selectattr('description', 'search', 'operator')|list|first).token }}"

          rescue:
            - name: Print when errors
              ansible.builtin.debug:
                msg: "Telegraf cannot be setup via ansible.\n The script cannot access SSL and/or some other wierd setup."
   
  when: influxdb_state == 'present'


#=============================================================================================================
#  Remove Block
#
- block:

  - name: Package remove
    ansible.builtin.include_tasks:
      file: "../../shared/any/tasks/{{ ansible_distribution }}-rm.yml"
    vars:
      package: influxdb2
      service_name: influxd.service

  #.........................
  - block:

    - name: "Remove InfluxDB configuration files"
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      become: true
      loop:
        - /etc/default/influxdb2
        - /etc/influxdb
        - /root/.influxdbv2
      register: file_cleanup
      ignore_errors: "{{ ansible_check_mode }}"
      failed_when: 
        - file_cleanup.failed is defined
        - file_cleanup.failed and not ansible_check_mode
        
    when: influxdb_delete_config

  #.........................
  - name: "Remove the data files in {{ influxdb_data_path }}"
    ansible.builtin.file :
      path: "{{ influxdb_data_path }}/{{ item }}"
      state: absent
    become: true
    when: influxdb_delete_data
    loop:
      - .cache
      - engine
      - influxd.bolt
      - influxd.sqlite


  when: influxdb_state == 'absent'